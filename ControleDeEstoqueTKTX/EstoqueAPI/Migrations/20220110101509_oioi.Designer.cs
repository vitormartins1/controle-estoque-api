// <auto-generated />
using System;
using Estoque.DATA.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EstoqueAPI.Migrations
{
    [DbContext(typeof(EstoqueContext))]
    [Migration("20220110101509_oioi")]
    partial class oioi
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Estoque.DOMAIN.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("VARCHAR(35)");

                    b.HasKey("IdCliente");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Compra", b =>
                {
                    b.Property<int>("CompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompraId"), 1L, 1);

                    b.Property<int>("IdFornecedor")
                        .HasColumnType("int");

                    b.Property<string>("Invoice")
                        .HasMaxLength(43)
                        .HasColumnType("VARCHAR(43)");

                    b.HasKey("CompraId");

                    b.HasIndex("IdFornecedor");

                    b.ToTable("Compra", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Fornecedor", b =>
                {
                    b.Property<int>("FornecedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FornecedorId"), 1L, 1);

                    b.Property<string>("NomeFornecedor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("FornecedorId");

                    b.ToTable("Fornecedor", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.ItemDanificado", b =>
                {
                    b.Property<int>("IdItemDanificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdItemDanificado"), 1L, 1);

                    b.Property<int?>("IdLote")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnType("int");

                    b.Property<int?>("IdVenda")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("IdItemDanificado");

                    b.HasIndex("IdProduto")
                        .IsUnique();

                    b.ToTable("ItemDanificado", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.ItemEstoque", b =>
                {
                    b.Property<int>("ItemEstoqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemEstoqueId"), 1L, 1);

                    b.Property<int>("IdCompra")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnType("int");

                    b.Property<int>("LoteId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("ItemEstoqueId");

                    b.HasIndex("IdCompra");

                    b.HasIndex("IdProduto")
                        .IsUnique();

                    b.HasIndex("LoteId");

                    b.ToTable("ItemEstoque", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.ItemRetornado", b =>
                {
                    b.Property<int>("IdItemRetornado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdItemRetornado"), 1L, 1);

                    b.Property<int>("IdProduto")
                        .HasColumnType("int");

                    b.Property<int>("IdVendaRetornada")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("IdItemRetornado");

                    b.HasIndex("IdProduto")
                        .IsUnique();

                    b.HasIndex("IdVendaRetornada");

                    b.ToTable("ItemRetornado", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.ItemVenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdProduto")
                        .HasColumnType("int");

                    b.Property<int>("IdVenda")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProduto")
                        .IsUnique();

                    b.HasIndex("IdVenda");

                    b.ToTable("ItemVenda", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Lote", b =>
                {
                    b.Property<int>("LoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoteId"), 1L, 1);

                    b.Property<int>("CompraId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataDeEntrada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("DataDeEntrada")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("LoteId");

                    b.HasIndex("CompraId");

                    b.ToTable("Lote", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Produto", b =>
                {
                    b.Property<int>("IdProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProduto"), 1L, 1);

                    b.Property<string>("DescricaoProduto")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<string>("NomeProduto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("QuantidadeEstoque")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeVendas")
                        .HasColumnType("int");

                    b.Property<double>("ValorProduto")
                        .HasColumnType("float");

                    b.HasKey("IdProduto");

                    b.ToTable("Produto", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Venda", b =>
                {
                    b.Property<int>("VendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendaId"), 1L, 1);

                    b.Property<int>("IdCliente")
                        .HasColumnType("integer");

                    b.Property<string>("NumeroPedido")
                        .HasMaxLength(13)
                        .HasColumnType("VARCHAR(13)");

                    b.Property<int>("TipoVenda")
                        .HasColumnType("int");

                    b.HasKey("VendaId");

                    b.HasIndex("IdCliente");

                    b.ToTable("Venda", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.VendaRetornada", b =>
                {
                    b.Property<int>("IdVendaRetornada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVendaRetornada"), 1L, 1);

                    b.Property<int>("IdVenda")
                        .HasColumnType("int");

                    b.HasKey("IdVendaRetornada");

                    b.ToTable("VendaRetornada", (string)null);
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Compra", b =>
                {
                    b.HasOne("Estoque.DOMAIN.Models.Fornecedor", "Fornecedor")
                        .WithMany("Compras")
                        .HasForeignKey("IdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Fornecedor_Compras");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.ItemDanificado", b =>
                {
                    b.HasOne("Estoque.DOMAIN.Models.Produto", "Produto")
                        .WithOne()
                        .HasForeignKey("Estoque.DOMAIN.Models.ItemDanificado", "IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ItemDanificado_Produto");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.ItemEstoque", b =>
                {
                    b.HasOne("Estoque.DOMAIN.Models.Compra", null)
                        .WithMany("ItemsEstoque")
                        .HasForeignKey("IdCompra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Compra_ItemsEstoque");

                    b.HasOne("Estoque.DOMAIN.Models.Produto", "Produto")
                        .WithOne()
                        .HasForeignKey("Estoque.DOMAIN.Models.ItemEstoque", "IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ItemEstoque_Produto");

                    b.HasOne("Estoque.DOMAIN.Models.Lote", null)
                        .WithMany("ItemsEstoque")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Lote_ItemsEstoque");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.ItemRetornado", b =>
                {
                    b.HasOne("Estoque.DOMAIN.Models.Produto", "Produto")
                        .WithOne()
                        .HasForeignKey("Estoque.DOMAIN.Models.ItemRetornado", "IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ItemRetornado_Produto");

                    b.HasOne("Estoque.DOMAIN.Models.VendaRetornada", null)
                        .WithMany("ItemRetornados")
                        .HasForeignKey("IdVendaRetornada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VendaRetornada_ItemRetornados");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.ItemVenda", b =>
                {
                    b.HasOne("Estoque.DOMAIN.Models.Produto", "Produto")
                        .WithOne()
                        .HasForeignKey("Estoque.DOMAIN.Models.ItemVenda", "IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ItemVenda_Produto");

                    b.HasOne("Estoque.DOMAIN.Models.Venda", null)
                        .WithMany("ItemVendas")
                        .HasForeignKey("IdVenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Venda_ItemVendas");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Lote", b =>
                {
                    b.HasOne("Estoque.DOMAIN.Models.Compra", "Compra")
                        .WithMany("Lotes")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Compra_Lotes");

                    b.Navigation("Compra");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Venda", b =>
                {
                    b.HasOne("Estoque.DOMAIN.Models.Cliente", "Cliente")
                        .WithMany("Vendas")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cliente_Vendas");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Cliente", b =>
                {
                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Compra", b =>
                {
                    b.Navigation("ItemsEstoque");

                    b.Navigation("Lotes");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Fornecedor", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Lote", b =>
                {
                    b.Navigation("ItemsEstoque");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.Venda", b =>
                {
                    b.Navigation("ItemVendas");
                });

            modelBuilder.Entity("Estoque.DOMAIN.Models.VendaRetornada", b =>
                {
                    b.Navigation("ItemRetornados");
                });
#pragma warning restore 612, 618
        }
    }
}
